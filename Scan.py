import hashlib
import time
import os.path
import requests
import json
from os import listdir
from os.path import isfile, join, isdir
from tkinter import *
from tkinter import messagebox
from tkinter.filedialog import askdirectory
from tkinter import ttk
import MessageBox

rootScan = Tk()
rootScan.title("WMS Analyzer")
rootScan.geometry("600x400")
url = "https://www.virustotal.com/gui/home/upload"
timeout = 5
progressbar = ttk.Progressbar(rootScan, orient=HORIZONTAL, length=300,mode='determinate',maximum=100)
#message
getMessage = MessageBox.MessageBox()

def stopSys():
    sys.exit()


def file_as_bytes(file):
    with file:
        return file.read()


#This function used to say thanks users
def ThankYou():
     getMessage.Message(3)

def update_progress_label():
    return f"Please wait for current progress is running..."



# label
value_label = ttk.Label(rootScan, text=update_progress_label())
value_label.grid(column=0, row=1, columnspan=2)
progressbar.grid(column=0, row=0, columnspan=2, padx=150, pady=20)

# This button will initialize
# the progress bar
#stopButton = Button(rootScan, text='Stop', command=stopSys)
#stopButton.grid(columnspan=2,pady=150)


#get the full path dir
rootScan.directory = askdirectory()
rootDir = rootScan.directory
if not rootDir:
    sys.exit()

#Check Internet-Connection becase Internet-Connection is required to run software
try:
	request = requests.get(url, timeout=timeout)
	print("Connected to the Internet")
except (requests.ConnectionError, requests.Timeout) as exception:
    getMessage.Message(4)
    print("No internet connection.")
    sys.exit()


def hash_file(full_path):
    print(full_path)
    try:
        md5_val = hashlib.md5(file_as_bytes(
            open(full_path, 'rb'))).hexdigest()
        return md5_val
    except FileNotFoundError:
        print(FileNotFoundError)
        return ""

def request_vt(hash):
    url = "https://www.virustotal.com/api/v3/files/" + str(hash)
    headers = {
        "X-Apikey": "3ea03f8f20cdf64589fbb95fa7acdafe29c416b2508455d9b7c16ff65ed1fecb"}
    res = requests.get(url, headers=headers)
    res = json.loads(res.text)
    return res

#c940b1397abe8c705da3404a58c88c4c7b31bbe88159733d3e63fc9fbe796eb6
def scan_file(path):
    print("path:",path)
    result = {"is_safe": True,  "suspicious": 0,
              "harmless": 0, "undetected": 0, "notFound": False}
    hash = hash_file(path)
    if hash == "":
        print("FILE NOT FOUND")
    else:
        res = request_vt(hash)

    if "error" in res and res["error"]["code"] == "NotFoundError":
        result["notFound"] = True
        return result

    data = res["data"]["attributes"]["last_analysis_stats"]
    print("res",data)
    if data['malicious'] > 0:
        result["is_safe"] = False
        result["suspicious"] = data["suspicious"]
        result["undetected"] = data["undetected"]
        result["harmless"] = data["harmless"]

    return result


def listDir(path):
    file = [f for f in listdir(path) if isfile(join(path, f))]
    folder = [f for f in listdir(path) if isdir(join(path, f))]
    return file, folder


def listAllFile(path):
    isSubDir = False
    listFileinDir = []
    file, folder = listDir(path)
    file = list(map(lambda f: path + "/" + f, file))
    listFileinDir += file
    isSubDir = True if len(folder) > 0 else False
    folder = list(map(lambda f: path + "/" + f, folder))
    subfolder = folder.copy()
    while isSubDir:
        isSubDir = False
        initialLength = len(subfolder)
        #print("subfolder", subfolder)
        for fol in subfolder:
            print(".......")
            file, folder = listDir(fol)
            listFileinDir += list(map(lambda f: fol + "/" + f, file))
            folder = list(map(lambda f: fol + "/" + f, folder))
            if (len(folder) > 0):
                subfolder += folder
                isSubDir = True
        subfolder = subfolder[initialLength:]

    return listFileinDir

def scan_folder(path):
    safeFiles = ["jpg","png","svg","ico","jfif","pdf","doc","docx","pptx","ppt","xlsx","txt","log","iso",
                "html","css","tif","mp3","wav","avi","mpg","wmv","flv","gif"]
    files = listAllFile(path)
    res = None
    malicious = []
    for file in files:
        if(file.split(".")[1] not in safeFiles):
            res = scan_file(file)
            if res["is_safe"] == False:
                malicious.append(file)
    if len(malicious) > 0:
        step = (100 / len(malicious))
    else:
        step = (100/len(files))
    scan_folder.stepProgressBar = step
    if len(malicious) > 0:
        for i in malicious:
            progress()
    else:
        for i in files:
            progress()
    print("malicious: " , malicious)
    if not malicious:
        getMessage.Message(1)
        rootScan.destroy()
        ThankYou()
    else:
        getMessage.Message(2)
        res = getMessage.Message(5)
        print("Attempting to delete files....")
        time.sleep(1)
        if res == 1:
            if rootDir:
                print("Creating registry backup...")
                time.sleep(2)
                print("Removing all registry entries related to files...")
                time.sleep(1)
                print("Removing files traces...")
                time.sleep(1)
                print("Done!")
                for f in malicious:
                    os.remove(os.path.join(rootDir, f))
            else:
                print("The folder cannot be deleted.Please do not use the file.It's Malicious")
        else:
            print(("res : ", res))
        ThankYou()
    return malicious

def progress():
    progressbar['value'] += scan_folder.stepProgressBar
    value_label['text'] = update_progress_label()
    rootScan.update_idletasks()
    time.sleep(0.2)

scan_folder(rootDir)

sys.exit()
rootScan.mainloop()