import hashlib
import sys
import vt
import time
import os.path
import requests
import json
from os import listdir
from os.path import isfile, join
from tkinter import *
from tkinter import messagebox
from tkinter import filedialog
from tkinter.filedialog import askdirectory
from tkinter import ttk
import  time
from math import trunc

rootScan = Tk()
rootScan.title("WMS Analyzer")
rootScan.geometry("600x400")
url = "https://www.virustotal.com/gui/home/upload"
timeout = 5
MAX = 0
progressbar = ttk.Progressbar(rootScan, orient=HORIZONTAL, length=300,mode='determinate',maximum=100)
#progressbar.pack(pady=20)

def file_as_bytes(file):
    with file:
        return file.read()


#This function used to say thanks users
def ThankYou():
    messagebox.showinfo("Thank You!",
                        "Thank you for using the tool!\nMake sure to scan Suspicious files\nStay Informed. Stay Secure.")

def update_progress_label():
    return f"Current Progress: {progressbar['value']}%"




# label
value_label = ttk.Label(rootScan, text=update_progress_label())
value_label.grid(column=0, row=1, columnspan=2)
progressbar.grid(column=0, row=0, columnspan=2, padx=150, pady=20)
#get the full path dir
rootScan.directory = askdirectory()
rootDir = rootScan.directory
if not rootDir:
    sys.exit()

#Check Internet-Connection becase Internet-Connection is required to run software
try:
	request = requests.get(url, timeout=timeout)
	print("Connected to the Internet")
except (requests.ConnectionError, requests.Timeout) as exception:
    messagebox.showinfo("ConnectionError", "Please Check Internet-Connection becase Internet-Connection is required to run software")
    print("No internet connection.")
    sys.exit()


def hash_file(full_path):
    print(full_path)
    try:
        md5_val = hashlib.md5(file_as_bytes(
            open(full_path, 'rb'))).hexdigest()
        return md5_val
    except FileNotFoundError:
        print(FileNotFoundError)
        return ""


def request_vt(hash):
    url = "https://www.virustotal.com/api/v3/files/" + str(hash)
    headers = {
        "X-Apikey": "c940b1397abe8c705da3404a58c88c4c7b31bbe88159733d3e63fc9fbe796eb6"}
    res = requests.get(url, headers=headers)
    res = json.loads(res.text)
    return res


def scan_file(path):
    result = {"is_safe": True,  "suspicious": 0,
              "harmless": 0, "undetected": 0, "notFound": False}
    hash = hash_file(path)
    if hash == "":
        print("FILE NOT FOUND")
    else:
        res = request_vt(hash)

    if "error" in res and res["error"]["code"] == "NotFoundError":
        result["notFound"] = True
        return result

    data = res["data"]["attributes"]["last_analysis_stats"]
    if data['malicious'] > 0:
        result["is_safe"] = False
        result["suspicious"] = data["suspicious"]
        result["undetected"] = data["undetected"]
        result["harmless"] = data["harmless"]

    return result


def scan_folder(path):
    onlyfiles = [f for f in listdir(path)
                 if isfile(join(path, f))]
    res = None
    file_path = ""
    malicious = []
    step = trunc(100 / len(onlyfiles))
    MAX = len(listdir(path))
    stepProgressBar = step
    print("MAX", MAX)
    print("step", step)
    for file in onlyfiles:
        file_path = path + "/" + file
        res = scan_file(file_path)
#       progressbar.step(step)
#       progressbar.update()
        progressbar['value'] += stepProgressBar
        value_label['text'] = update_progress_label()
        rootScan.update_idletasks()
        time.sleep(0.1)
        if res["is_safe"] == False:
            malicious.append(file)
    print("malicious: " , malicious)
    if not malicious:
        messagebox.showinfo("Analysis Info", "Folder is Safe.\nOur Scanners found nothing Malicious")
        rootScan.destroy()
        ThankYou()
    else:
        messagebox.showwarning("Analysis Alert",
                               f"Given File is Malicious!\nWe advice you to remove the file from your computer to avoid harm to the system!")
        res = messagebox.askyesno("Analysis Alert",
                                  "The given files is highly Malicious.Do you wanna Delete it permanently?")
        print("Attempting to delete files....")
        time.sleep(1)
        if res == 1:
            if rootDir:
                print("Creating registry backup...")
                time.sleep(2)
                print("Removing all registry entries related to files...")
                time.sleep(1)
                print("Removing files traces...")
                time.sleep(1)
                print("Done!")
                for f in malicious:
                    os.remove(os.path.join(rootDir, f))
            else:
                print("The folder cannot be deleted.Please do not use the file.It's Malicious")
        else:
            print(("res : ", res))
        ThankYou()
    return malicious,MAX,stepProgressBar

scan_folder(rootDir)

sys.exit()
rootScan.mainloop()