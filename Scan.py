from tkinter import *
from tkinter import messagebox
import os.path
#Hashlib is a useful library that we will be using to generate MD5 of a file.
import hashlib
import sys
#Virustotal Library to query md5
import vt
import time

rootScan = Tk()
rootScan.title("WMS Analyzer")
rootScan.geometry("300x300")


#Function to calculate byte value of a file
def file_as_bytes(file):
    with file:
        return file.read()

#This function used to say thanks users
def ThankYou():
    messagebox.showinfo("Thank You!",
                        "Thank you for using the tool!\nMake sure to scan Suspicious files\nStay Informed. Stay Secure.")
    rootScan.destroy()


global md5_val
rootScan.filename = sys.argv[0]
var = os.path.abspath("D:\Pycham\PycharmProjects\Malware\Lab03-04.exe")
if os.path.getsize(var) / 1000 >= 999999:
    messagebox.showinfo("Error", "File Too Large To Analyze")
    rootScan.destroy()
#The "full_path" is the full path of where the file is present(ex: "D:\Pycham\PycharmProjects\Malware\lab03-01.txt")
full_path = var
try:
    # The "md5_val" now stores the MD5 value of the file whose path was given.
    md5_val = hashlib.md5(file_as_bytes(open(full_path, 'rb'))).hexdigest()
except FileNotFoundError:
    messagebox.showinfo("File Not Found", "Please Select A File to Analyze")

try:
    # Initializing a virustotal client object
    client = vt.Client("c940b1397abe8c705da3404a58c88c4c7b31bbe88159733d3e63fc9fbe796eb6")
    FILE_ID = md5_val
    # Providing the MD5 ofthe file to virustotal
    file = client.get_object("/files/" + str(md5_val))
    #Using virustotal api (JSON response "https://virustotalapi3.readthedocs.io/_/downloads/en/latest/pdf/")
    #We use the "last_analysis_stats" to get the results, if its 0 that mean the file is safe
    if file.last_analysis_stats['malicious'] == 0:
        messagebox.showinfo("Analysis Info", "File is Safe.\nOur Scanners found nothing Malicious")
        rootScan.destroy()
    elif file.last_analysis_stats['malicious'] <= 5:
        messagebox.showwarning("Analysis Alert",
                               f"Given File may be Malicious!\nDetection: {file.last_analysis_stats['malicious']}/{file.last_analysis_stats['malicious'] + file.last_analysis_stats['suspicious'] + file.last_analysis_stats['harmless'] + file.last_analysis_stats['undetected']}")
        ThankYou()
    elif file.last_analysis_stats['malicious'] > 5:
        messagebox.showwarning("Analysis Alert",
                               f"Given File is Malicious!\nDetection: {file.last_analysis_stats['malicious']}/{file.last_analysis_stats['malicious'] + file.last_analysis_stats['suspicious'] + file.last_analysis_stats['harmless'] + file.last_analysis_stats['undetected']}\nWe advice you to remove the file from your computer to avoid harm to the system!")
        res = messagebox.askyesno("Analysis Alert",
                                  "The given file is highly Malicious.Do you wanna Delete it permanently?")
        #Check res if res == True delete file
        if res == 1:
            print("Attempting to delete file....")
            time.sleep(1)
            if var:
                print("Creating registry backup...")
                time.sleep(2)
                print("Removing all registry entries related to file...")
                time.sleep(1)
                print("Removing file traces...")
                time.sleep(1)
                print("Done!")
                os.remove(var)
            else:
                print("The file cannot be deleted.Please do not use the file.It's Malicious")
        else:
            print(("res : ", res))
        ThankYou()

except(NameError, ValueError):
    messagebox.showinfo("Info", "Please Select File to Analyze")
    client.close()
    rootScan.destroy()
#Check Internet-Connection becase Internet-Connection is required to run software
except(ConnectionError):
    messagebox.showinfo("Info", "An Active Internet-Connection is required to run Scans.")
    client.close()
    rootScan.destroy()
except(Exception):  # This exception occurs when the file is not available in the virustotal database
    extension = var.split(".")[1]
    if ((extension == "jpg") or (extension == "png") or (extension == "svg") or (extension == "ico") or (
            extension == "jfif")):
        messagebox.showinfo("IntelESense Info", "Static Analysis Conclusion: SAFE FILE\nThis Image file is safe.")
    elif (
            extension == "pdf" or extension == "doc" or extension == "docx" or extension == "pptx" or extension == "ppt" or extension == "xlsx" or extension == "txt" or extension == "log"):
        messagebox.showinfo("IntelESense Info", "Static Analysis Conclusion: SAFE FILE\nThis Document is safe.")
    elif ((extension == "iso") or (extension == "zip") or (extension == "rar") or (extension == "7z")):
        messagebox.showinfo("IntelESense Info",
                            "Static Analysis Conclusion: This file Contains Multiple files inside.\nRecommended: Extract the files and Scan.")
    elif ((extension == "py") or (extension == "java") or (extension == "c") or (extension == "cpp") or (
            extension == "html") or (extension == "js") or (extension == "css")):
        messagebox.showinfo("IntelESense Info",
                            "Static Analysis Conclusion: SAFE FILE.\nAI Model detects general Source code:SAFE FILE.")
    else:
        messagebox.showinfo("IntelESense Info",
                            "Static Analysis Conclusion: SAFE FILE.\nThis " + var.split(".")[
                                1] + " file type is safe.")
    client.close()
    rootScan.destroy()
client.close()
rootScan.mainloop()